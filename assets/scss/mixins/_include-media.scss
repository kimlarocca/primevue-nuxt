//      Include-Media is a simple, elegant and maintainable media queries in Sass
//                        v2.0.0
//
//        https://eduardoboucas.github.io/include-media
//
//         Authors: Eduardo Boucas (@eduardoboucas)
//                  Kitty Giraudel (@kittygiraudel)
//
//      This project is licensed under the terms of the MIT license
@charset "UTF-8";

@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:meta';
@use '~/assets/scss/base/breakpoints.scss' as *;

// BREAKPOINTS ARE DEFINED IN THE BREAKPOINTS.SCSS FILE instead of here

// $breakpoints: (
//   'phone': $xs,
//   'xs': $xs,
//   'sm': $sm,
//   'tablet': $md,
//   'md': $md,
//   'desktop': $lg,
//   'lg': $lg,
//   'xl': $xl,
//   'xxl': $xxl
// ) !default;

$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'
) !default;

$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1,
  '': 0
) !default;

$im-media-support: true !default;

$im-no-media-breakpoint: 'desktop' !default;

$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;

@function im-intercepts-static-breakpoint($conditions...) {
  $no-media-breakpoint-value: map.get($breakpoints, $im-no-media-breakpoint);

  @if not $no-media-breakpoint-value {
    @error '#{$im-no-media-breakpoint}` is not a valid breakpoint.';
  }

  @each $condition in $conditions {
    @if not map.has-key($media-expressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);

      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or
        ($prefix == 'min' and $value > $no-media-breakpoint-value)
      {
        @return false;
      }
    } @else if not list.index($im-no-media-expressions, $condition) {
      @return false;
    }
  }

  @return true;
}

@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {
    @if string.index($expression, $operator) {
      @return $operator;
    }
  }

  @error 'No operator found in `#{$expression}`.';
}

@function get-expression-dimension($expression, $operator) {
  $operator-index: string.index($expression, $operator);
  $parsed-dimension: string.slice($expression, 0, $operator-index - 1);
  $parsed-dimension: str-trim($parsed-dimension);
  $dimension: 'width';

  @if string.length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}

@function get-expression-prefix($operator) {
  @return if(list.index(('<', '<=', '≤'), $operator), 'max', 'min');
}

@function get-expression-value($expression, $operator) {
  $operator-index: string.index($expression, $operator);
  $value: string.slice($expression, $operator-index + string.length($operator));
  $trimmedValue: str-trim($value);

  @if map.has-key($breakpoints, $trimmedValue) {
    $value: map.get($breakpoints, $trimmedValue);
  } @else {
    $value: to-number($trimmedValue);
  }

  $interval: map.get($unit-intervals, math.unit($value));

  @if not $interval {
    @error 'Unknown unit `#{math.unit($value)}`.';
  }

  @if $operator == '>' {
    $value: $value + $interval;
  } @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}

@function parse-expression($expression) {
  @if map.has-key($media-expressions, $expression) {
    @return map.get($media-expressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

@function slice($list, $start: 1, $end: list.length($list)) {
  @if list.length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: list.append($result, list.nth($list, $i), comma);
  }

  @return $result;
}

@function to-number($value) {
  @if meta.type-of($value) == 'number' {
    @return $value;
  } @else if meta.type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $first-character: string.slice($value, 1, 1);
  $result: 0;
  $digits: 0;
  $minus: ($first-character == '-');
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9
  );

  // Remove +/- sign if present at first character
  @if ($first-character == '+' or $first-character == '-') {
    $value: string.slice($value, 2);
  }

  @for $i from 1 through string.length($value) {
    $character: string.slice($value, $i, $i);

    @if not(list.index(map.keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), string.slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map.get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + math.div(map.get($numbers, $character), $digits);
    }
  }

  @return if($minus, -$result, $result);
}

@function to-length($value, $unit) {
  $units: (
    'px': 1px,
    'cm': 1cm,
    'mm': 1mm,
    '%': 1%,
    'ch': 1ch,
    'pc': 1pc,
    'in': 1in,
    'em': 1em,
    'rem': 1rem,
    'pt': 1pt,
    'ex': 1ex,
    'vw': 1vw,
    'vh': 1vh,
    'vmin': 1vmin,
    'vmax': 1vmax
  );

  @if not list.index(map.keys($units), $unit) {
    @error 'Invalid unit `#{$unit}`.';
  }

  @return $value * map.get($units, $unit);
}

@function str-trim($string) {
  @if (string.slice($string, 1, 1) == ' ') {
    @return str-trim(string.slice($string, 2));
  } @else if (string.slice($string, string.length($string), -1) == ' ') {
    @return str-trim(string.slice($string, 1, -2));
  } @else {
    @return $string;
  }
}

@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {
  $global-breakpoints: $breakpoints;
  $global-media-expressions: $media-expressions;

  $breakpoints: map.merge($breakpoints, $tweakpoints) !global;
  $media-expressions: map.merge($media-expressions, $tweak-media-expressions) !global;

  @content;

  $breakpoints: $global-breakpoints !global;
  $media-expressions: $global-media-expressions !global;
}

@mixin media($conditions...) {
  @if ($im-media-support and list.length($conditions) == 0) or
    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))
  {
    @content;
  } @else if ($im-media-support and list.length($conditions) > 0) {
    @media #{string.unquote(parse-expression(list.nth($conditions, 1)))} {
      // Recursive call
      $sliced-conditions: slice($conditions, 2);
      @include media($sliced-conditions...) {
        @content;
      }
    }
  }
}
